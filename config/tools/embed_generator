#!/usr/bin/python
# coding: UTF-8
#  Copyright (c) 2020 Matus Chochlik

import os
import re
import sys
import argparse
# ------------------------------------------------------------------------------
class EmberArgumentParser(argparse.ArgumentParser):
    # --------------------------------------------------------------------------
    def _positive_int(self, x):
        try:
            assert(int(x) > 0)
            return int(x)
        except:
            self.error("`%s' is not a positive integer value" % str(x))

    # --------------------------------------------------------------------------
    def __init__(self, **kw):
        argparse.ArgumentParser.__init__(self, **kw)

        self.add_argument(
            '-i', '--input',
            metavar='INPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-o', '--output',
            dest='output_path',
            metavar='OUTPUT-FILE',
            nargs='?',
            type=os.path.realpath,
            default=None
        )

        self.add_argument(
            '-s', '--search',
            dest='search_path',
            metavar='DIRECTORY',
            nargs='?',
            type=os.path.realpath,
            default=[],
            action="append"
        )

        self.add_argument(
            '-l', '--max-line-len',
            dest='max_line_len',
            metavar='COLUMNS',
            nargs='?',
            type=self._positive_int,
            default=80
        )

    # --------------------------------------------------------------------------
    def process_parsed_options(self, options):

        if options.output_path is None:
            options.output = sys.stdout
        else:
            if os.path.isdir(options.output_path):
                options.output_path = os.path.join(
                    options.output_path,
                    'resources.cpp'
                )
            options.output = open(options.output_path, "wt")

        return options

    # --------------------------------------------------------------------------
    def parse_args(self):
        return self.process_parsed_options(
            argparse.ArgumentParser.parse_args(self)
        )

# ------------------------------------------------------------------------------
def make_argparser():
    return EmberArgumentParser(
        prog="embed_generator",
        description="""
        makes a compilable C/C++ source file containing
        static embed data from input files.
        """
    )
# ------------------------------------------------------------------------------
def make_res_code(options, ident, path):
    options.output.write("    if(res_id == EAGINE_ID(%s)) {\n" % ident)
    options.output.write("        static const byte res[] = {\n")
    linelen = 0
    first = True
    resource_path = path
    if not os.path.isfile(resource_path):
        for search_dir in options.search_path:
            if os.path.isfile(os.path.join(search_dir, path)):
                resource_path = os.path.realpath(os.path.join(search_dir, path))
                break
    
    with open(resource_path, "rb") as rfd:
        while True:
            byte = rfd.read(1)
            if not byte:
                break

            temp = ""
            if first:
                first = False
                temp += "  "
            else:
                temp += ", "

            temp += "0x%x" % ord(byte)
            
            if linelen > options.max_line_len - 16:
                linelen = 0
                temp += "\n"
            else:
                linelen += len(temp)
            options.output.write(temp)
    options.output.write("\n        };\n")
    options.output.write("        return view(res);\n")
    options.output.write("    }\n")
# ------------------------------------------------------------------------------
def make_prologue(options):
    options.output.write("#include <eagine/identifier.hpp>\n");
    options.output.write("#include <eagine/memory/block.hpp>\n");
    options.output.write("namespace eagine {\n")
    options.output.write(
        "memory::const_block get_embedded_resource(identifier res_id) {\n"
    )
# ------------------------------------------------------------------------------
def make_epilogue(options):
    options.output.write("    return {};\n")
    options.output.write("}\n")
    options.output.write("} // namespace eagine\n")
# ------------------------------------------------------------------------------
def make_resource_file(options):
    embed_re = r'embed\(\s*EAGINE_ID\(([a-zA-Z0-9_]+)\),\s*("([^"]+)"|__FILE__)\s*\)'
    some_output = False
    for path in options.input:
        with open(path, "rt") as ifd:
            source = str()
            for line in ifd.readlines():
                source += line
                embeds = re.findall(embed_re, source)
                if embeds:
                    for ident, res_expr, res_path in embeds:
                        if not some_output:
                            make_prologue(options)
                            some_output = True
                        if res_expr == "__FILE__":
                            make_res_code(options, ident, path)
                        else:
                            make_res_code(options, ident, res_path)
                    source = str()
    if some_output:
        make_epilogue(options)

# ------------------------------------------------------------------------------
def main():
    make_resource_file(make_argparser().parse_args())
    return 0
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    exit(main())
# ------------------------------------------------------------------------------
